    /**
     * @param $id
     * @param Request $request
     * @return JsonResponse
     * @throws \Exception
     */
    public function save($id, Request $request): JsonResponse
    {
        try {
            $itemId = null;
            $result = [
                'title' => 'SymfonyTpl',
                'success' => true,
                'message' => '',
                'errors' => []
            ];
            $langData = [];
            $translator = $this->get('translator');
            /**
            * Set transaction so that we can rollback
            * the db if there are some error occurred
            */
            $this->connection->beginTransaction();
            try {
                if ($request->getMethod() == 'POST') {
                    /**
                     * remove language tab data if exist
                     * and store it temporarily
                     */
                    if (!empty($request->request->all()['language'])) {
                        $langData = $request->request->all()['language'];
                        $request->request->remove('language');
                    }
                    //save SampleEntity
                    $resSampleEntity = $this->saveSampleEntity($id, $request);

                    if ($resSampleEntity['success']) {
                        $itemId = $resSampleEntity['id'];
                        //execute saving SampleLanguageEntity
                        if(!empty($langData)) {
                            $langResult = $this->saveSampleLanguageEntity($itemId, $request, $langData);
                            if(!$langResult['success']){
                                $result['errors'] = array_merge($result['errors'], $langResult['errors']);
                                $result['success'] = false;
                            }
                        }
                    } else {
                        $result['errors'] = array_merge($result['errors'], $resSampleEntity['errors']);
                        $result['success'] = false;
                    }

                    /**
                     * Check if the saving is success
                     */
                    if($result['success']){
                        $result['message'] = (empty($id)) ? $translator->trans('tool_symfony_tpl_successfully_saved') : $translator->trans('tool_symfony_tpl_successfully_updated');
                        $icon = 'glyphicon-info-sign';
                        //commit the data
                        $this->connection->commit();
                    }else{
                        $icon = 'glyphicon-warning-sign';
                        $result['message'] = (empty($id)) ? $translator->trans('tool_symfony_tpl_unable_to_save') : $translator->trans('tool_symfony_tpl_unable_to_update');
                        //rollback db
                        $this->connection->rollBack();
                    }
                }
            } catch (\Exception $ex) {
                $result['message'] = $ex->getMessage();
                $icon = 'glyphicon-warning-sign';
                //rollback db
                $this->connection->rollBack();
            }

            $typeCode = (empty($id)) ? 'SYMFONYTPL_TOOL_SAVE' : 'SYMFONYTPL_TOOL_UPDATE';
            //add message notification
            $this->toolService->addToFlashMessenger($result['title'], $result['message'], $icon);
            //save logs
            $this->toolService->saveLogs($result['title'], $result['message'], $result['success'], $typeCode, $itemId);

            return new JsonResponse($result);
        }catch (\Exception $ex){
            exit($ex->getMessage());
        }
    }

    /**
     * @param $sampleEntityId
     * @param $request
     * @param $data
     * @return array
     */
    private function saveSampleLanguageEntity($sampleEntityId, Request $request, $data)
    {
        /**
         * Prepare the results
         */
        $result = [
            'errors' => [],
            'success' => false,
        ];
        //try to get SampleLanguageEntity data
        $dataSampleLanguageEntity = $this->toolService->getEntity($this->getDoctrine(), 'App\Bundle\SymfonyTpl\Entity\SampleLanguageEntity', "findBy", ['secondary_tbl_pt_id' => $sampleEntityId]);
        //loop trough every language data
        foreach($data as $languageId => $val) {
            /**
             * Lets check whether all the data
             * in the array is empty to avoid
             * insertion of blank data
             */
            //exclude _token
            $validateData = $val;
            if(!empty($validateData['_token']))
                unset($validateData['_token']);
            //start validation
            if(!$this->toolService->isArrayEmpty($validateData)) {
                /**
                 * Duplicate the request to override the data
                 * so that we can validate our form per language
                 */
                $request = $request->duplicate([], $val);
                /**
                 * If $dataSampleLanguageEntity is not empty means
                 * we are going to update a records
                 */
                if (!empty($dataSampleLanguageEntity)) {
                    $languageFound = false;
                    foreach ($dataSampleLanguageEntity as $entity) {
                        if ($entity->getLanguageFkId() == $languageId) {
                            $form = $this->createForm(SampleLanguageEntityFormType::class, $entity);
                            $this->validatedAndSave($result, $form, $request, $entity);
                            //if the validation is not success, then we stop and return the error
                            if(!$result['success'])
                                return $result;

                            $languageFound = true;
                            break;
                        }
                    }

                    if (!$languageFound) {
                        /**
                         * Insert new record
                         */
                        $this->saveSampleLanguageEntityNewRecord($result, $sampleEntityId, $languageId, $request);
                        //if the validation is not success, then we stop and return the error
                        if(!$result['success'])
                            return $result;
                    }
                } else {
                    /**
                    * Insert new record
                    */
                    $this->saveSampleLanguageEntityNewRecord($result, $sampleEntityId, $languageId, $request);
                    //if the validation is not success, then we stop and return the error
                    if(!$result['success'])
                        return $result;
                }
            }else{
                /**
                * This will delete the data in the db
                * if the user submit an empty data that
                * exist in the db(for update only)
                */
                if(!empty($dataCmsNewsTexts)){
                    $entityManager = $this->getDoctrine()->getManager();
                    foreach($dataCmsNewsTexts as $entity){
                        if ($entity->getLanguageFkId() == $languageId) {
                            try {
                                $id = $this->toolService->getEntityPrimaryIdValue($entityManager, $entity);
                                $entity = $entityManager->getRepository(get_class($entity))->find($id);
                                $entityManager->remove($entity);
                                $entityManager->flush();
                            }catch (\Exception $ex){
                                $result['success'] = false;
                            }
                        }
                    }
                }
            }
        }
        return $result;
    }

    /**
    * @param $result
    * @param $sampleEntityId
    * @param $languageId
    * @param $request
    */
    private function saveSampleLanguageEntityNewRecord(&$result, $sampleEntityId, $languageId, $request)
    {
        $entity = new CmsNewsTexts();
        //set SampleEntity
        $sampleEntityEntity = $this->toolService->getEntity($this->getDoctrine(), 'App\Bundle\SymfonyTpl\Entity\SampleEntity', "find", $sampleEntityId);
        $entity->setSecondaryTblPtId($sampleEntityEntity);
        //set language id
        if(empty($entity->getLanguageFkId()))
            $entity->setLanguageFkId($languageId);

        $form = $this->createForm(SampleLanguageEntityFormType::class, $entity);
        $this->validatedAndSave($result, $form, $request, $entity);
    }